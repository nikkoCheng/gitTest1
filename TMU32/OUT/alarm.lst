C51 COMPILER V7.09   ALARM                                                                 02/13/2012 10:58:54 PAGE 1   


C51 COMPILER V7.09, COMPILATION OF MODULE ALARM
OBJECT MODULE PLACED IN .\OUT\alarm.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE alarm\alarm.c LARGE BROWSE INCDIR(main,header_files,dataProcess,watchDog,le
                    -dProcess,mcu,adConvert,IDB,protect_j,alarm,key,timer,command) DEBUG OBJECTEXTEND PRINT(.\OUT\alarm.lst) OBJECT(.\OUT\ala
                    -rm.obj)

line level    source

   1          /***************************************************************************
   2          *alarm.c                           告警处理
   3          ****************************************************************************/
   4          
   5          
   6          //#include "variable.h"
   7          //#include "fapsMain.h"
   8          
   9          #include "keyget.h"
  10          #include "share.h"
  11          #include "1.h"
  12          //#include "protect1dot1.h"
  13          //#include "protectFun.h"
  14          //#include "ds1307.h"
  15          //#include "record.h"
  16          
  17          char bdata  systemAlarm0;
  18          char bdata  systemAlarm1;
  19          char bdata  systemAlarm2;
  20          char bdata  systemAlarm3;
  21          
  22          
  23          sbit bMainAlarm         = systemAlarm0 ^ 1;    
  24          sbit bStandbyAlarm      = systemAlarm0 ^ 2;     
  25          sbit bMainError         = systemAlarm0 ^ 3;     
  26          sbit bStandbyError      = systemAlarm0 ^ 4;     
  27          sbit bInError           = systemAlarm0 ^ 5;     
  28          sbit bRemoteStandbyError= systemAlarm0 ^ 6;    
  29          sbit bRemoteInError     = systemAlarm0 ^ 7;     
  30          
  31          
  32          
  33          sbit bE11Warn           = systemAlarm2 ^ 1; 
  34          sbit bE12Warn           = systemAlarm2 ^ 2;
  35           
  36          sbit bDc1PowerWarn      = systemAlarm1 ^ 0;
  37          sbit bDc2PowerWarn      = systemAlarm1 ^ 1;
  38          sbit bAcPowerWarn       = systemAlarm1 ^ 2;      
  39          sbit bSysError             = systemAlarm1^4;     
  40          sbit bTempAlarm         = systemAlarm1 ^ 3;     
  41          
  42          sbit bNewLog            = systemAlarm2 ^ 0;
  43          sbit bInitMod           = systemAlarm2 ^ 3;
  44          
  45          
  46          
  47          
  48          
  49          //unsigned char volatile xdata xOTHERALARM    _at_ 0xC050;
  50          //unsigned char volatile xdata xALARMRELAY    _at_ 0xC070;      
  51          
  52          
  53          
C51 COMPILER V7.09   ALARM                                                                 02/13/2012 10:58:54 PAGE 2   

  54          
  55          static void alarm_fiber_process(void)
  56          {
  57   1          static bit mainAlarm;      
  58   1          static bit standbyAlarm;  
  59   1          static unsigned char mainAlarmCount; 
  60   1          static unsigned char standbyAlarmCount;
  61   1          
  62   1      
  63   1          if( mainInfo.workStatus == SERVICE_AT_MAIN )
  64   1          {
  65   2              if( ((!mainAlarm)&&(mainInfo.currentMain>mainInfo.serviceAlarmValue))
  66   2                  || ((mainAlarm)&&(mainInfo.currentMain<(mainInfo.serviceAlarmValue+sys.powerSwing))) )
  67   2                  mainAlarmCount = 0;      
  68   2              else
  69   2                  mainAlarmCount ++;      
  70   2      
  71   2              if( ((!standbyAlarm)&&(mainInfo.currentStandby>mainInfo.laserAlarmValue))
  72   2                  || ((standbyAlarm)&&(mainInfo.currentStandby<(mainInfo.laserAlarmValue+sys.powerSwing))) )
  73   2                  standbyAlarmCount = 0;      
  74   2              else
  75   2                  standbyAlarmCount ++;     
  76   2      
  77   2          }
  78   1          else
  79   1          {
  80   2      
  81   2              if( ((!mainAlarm)&&(mainInfo.currentMain>mainInfo.laserAlarmValue))
  82   2                  || ((mainAlarm)&&(mainInfo.currentMain<(mainInfo.laserAlarmValue+sys.powerSwing))) )
  83   2                  mainAlarmCount = 0;    
  84   2              else
  85   2                  mainAlarmCount ++;    
  86   2              
  87   2              if( ((!standbyAlarm)&&(mainInfo.currentStandby>mainInfo.serviceAlarmValue))
  88   2                  || ((standbyAlarm)&&(mainInfo.currentStandby<(mainInfo.serviceAlarmValue+sys.powerSwing))) )
  89   2                  standbyAlarmCount = 0;     
  90   2              else
  91   2                  standbyAlarmCount ++;     
  92   2          }
  93   1      
  94   1          
  95   1          if( (mainAlarmCount>=4*3)&&(!mainAlarm) )
  96   1          { 
  97   2              mainAlarm = 1;
  98   2      
  99   2              if( !bMainError )
 100   2              {
 101   3                  return;
 102   3              }
 103   2          }
 104   1          else if( (mainAlarmCount>=4*3)&&(mainAlarm) )
 105   1          { 
 106   2              mainAlarm = 0;
 107   2      
 108   2              if( bMainAlarm )
 109   2              {
 110   3                  return;
 111   3              }
 112   2          }
 113   1          
 114   1          
 115   1          if( (standbyAlarmCount>=4*3)&& (!standbyAlarm) )
C51 COMPILER V7.09   ALARM                                                                 02/13/2012 10:58:54 PAGE 3   

 116   1          {
 117   2              standbyAlarm = 1;
 118   2      
 119   2              if( !bStandbyError )
 120   2              {
 121   3                  return;
 122   3              }
 123   2          }
 124   1          else if( (standbyAlarmCount>=4*3)&&(standbyAlarm) )
 125   1          { 
 126   2              standbyAlarm = 0;
 127   2      
 128   2              if( bStandbyAlarm )
 129   2              {
 130   3                  return;
 131   3              }
 132   2          }
 133   1      
 134   1          if( bMainError )
 135   1              bMainAlarm = 0;
 136   1          else
 137   1              bMainAlarm = mainAlarm;
 138   1      
 139   1          if( bStandbyError )
 140   1              bStandbyAlarm = 0;
 141   1          else
 142   1              bStandbyAlarm = standbyAlarm;
 143   1      }
 144          
 145          void Other_Alarm_Process(void)
 146          {    
 147   1          
 148   1              bTempAlarm = 0;           /*暂时屏蔽温度告警 060626*/
 149   1      }
 150            
 151          
 152          void alarm_process(void)
 153          {    
 154   1          static unsigned char otherCount;   
 155   1          static unsigned char otherBak; 
 156   1          static unsigned char tempAlarmCount;
 157   1          static bit tempBak;
 158   1      
 159   1          if( mainInfo.paramentInit == 0 )
 160   1          {
 161   2              systemAlarm0 = 0;
 162   2              systemAlarm1 = 0;
 163   2              systemAlarm2 = 0;
 164   2              systemAlarm3 = 0;
 165   2              bInitMod = 1;
 166   2             return;
 167   2          }
 168   1      
 169   1          bInitMod = 0;
 170   1      
 171   1          alarm_fiber_process();
 172   1          Other_Alarm_Process();
 173   1      
 174   1          if( systemAlarm0 || systemAlarm1 || (systemAlarm2&0x6) )
 175   1          {        
 176   2              mainInfo.cSysAlarmStatus = 1;
 177   2          }
C51 COMPILER V7.09   ALARM                                                                 02/13/2012 10:58:54 PAGE 4   

 178   1          else
 179   1          {
 180   2              mainInfo.cSysAlarmStatus = 0;
 181   2          }
 182   1      }
*** WARNING C280 IN LINE 154 OF ALARM\ALARM.C: 'otherCount': unreferenced local variable
*** WARNING C280 IN LINE 155 OF ALARM\ALARM.C: 'otherBak': unreferenced local variable
*** WARNING C280 IN LINE 156 OF ALARM\ALARM.C: 'tempAlarmCount': unreferenced local variable
*** WARNING C280 IN LINE 157 OF ALARM\ALARM.C: 'tempBak': unreferenced local variable
 183          
 184          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    463    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      5    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      4    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      3    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  4 WARNING(S),  0 ERROR(S)

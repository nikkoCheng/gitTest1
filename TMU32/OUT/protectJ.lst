C51 COMPILER V7.09   PROTECTJ                                                              02/13/2012 10:59:00 PAGE 1   


C51 COMPILER V7.09, COMPILATION OF MODULE PROTECTJ
OBJECT MODULE PLACED IN .\OUT\protectJ.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE protect_j\protectJ.c LARGE BROWSE INCDIR(main,header_files,dataProcess,watc
                    -hDog,ledProcess,mcu,adConvert,IDB,protect_j,alarm,key,timer,command) DEBUG OBJECTEXTEND PRINT(.\OUT\protectJ.lst) OBJECT
                    -(.\OUT\protectJ.obj)

line level    source

   1          /********************************************************************
   2          *1:1 2个PIN和3个PIN光保护设备保护控制程序
   3          *
   4          *
   5          *********************************************************************/
   6          //#include "fapsMain.h"
   7          //#include "variable.h"
   8          
   9          //#include "share.h"
  10          //#include "protect.h"
  11          //#include "protectFun.h"
  12          //#include "alarm.h"
  13          //#include "adProcess.h"
  14          //#include "cmdAddr.h"
  15          //#include "hardware.h"
  16          //#include "dataProcess.h"
  17          
  18          #include "typeDef.h"
  19          #include "1.h"
  20          #include "protectFun.h"
  21          
  22          
  23          #define LIGHT_DOWN      1       
  24          #define LIGHT_OK        0       
  25          
  26          #define PROTECT_COUNT_MAX       9       
  27          
  28          /*旁路保护程序*/
  29          void protect_obp(void)  using 2
  30          {   
  31   1           
  32   1          if( (mainError == LIGHT_OK) && (sys.powerSingleMain < sys.serviceSwitchValue) )
  33   1          { 
  34   2                  mainError = LIGHT_DOWN;
  35   2          }
  36   1          else if ( (mainError == LIGHT_DOWN) && (sys.powerSingleMain>(sys.serviceSwitchValue+sys.powerSwing)) )
  37   1          { 
  38   2                  mainError = LIGHT_OK;
  39   2          }      
  40   1      
  41   1          if( (standbyError == LIGHT_OK) && (sys.powerSingleStandby < sys.serviceSwitchValue) )
  42   1           { 
  43   2                  standbyError = LIGHT_DOWN;
  44   2          }
  45   1          else if( (standbyError == LIGHT_DOWN) && (sys.powerSingleStandby>(sys.serviceSwitchValue+sys.powerSwin
             -g)) )
  46   1          { 
  47   2                  standbyError = LIGHT_OK;
  48   2          } 
  49   1      
  50   1      
  51   1          /*****主用计次********/
  52   1          if( mainError == LIGHT_OK )
C51 COMPILER V7.09   PROTECTJ                                                              02/13/2012 10:59:00 PAGE 2   

  53   1          {
  54   2              sys.okCountMain ++;
  55   2              sys.errorCountMain = 0;
  56   2      
  57   2              if( sys.okCountMain >= PROTECT_COUNT_MAX )
  58   2                  sys.okCountMain = PROTECT_COUNT_MAX;
  59   2          }
  60   1          else
  61   1          {
  62   2              sys.errorCountMain ++;
  63   2              sys.okCountMain = 0;
  64   2              
  65   2              if( sys.errorCountMain >= PROTECT_COUNT_MAX )
  66   2                  sys.errorCountMain = PROTECT_COUNT_MAX;
  67   2          }
  68   1      
  69   1          /*****备用计次********/
  70   1          if( standbyError == LIGHT_OK )
  71   1          {
  72   2              sys.okCountStandby++;
  73   2              sys.errorCountStandby= 0;
  74   2      
  75   2              if( sys.okCountStandby >= PROTECT_COUNT_MAX )
  76   2                  sys.okCountStandby = PROTECT_COUNT_MAX;
  77   2          }
  78   1          else
  79   1          {
  80   2              sys.errorCountStandby ++;
  81   2              sys.okCountStandby = 0;
  82   2              
  83   2              if( sys.errorCountStandby >= PROTECT_COUNT_MAX )
  84   2                  sys.errorCountStandby = PROTECT_COUNT_MAX;
  85   2          }
  86   1      
  87   1          /*******不允许保护退出*********/
  88   1          if( !sys.enable )
  89   1              return;
  90   1      
  91   1      
  92   1          protectFlag = 0;
  93   1          
  94   1          if( sys.workStatus == SERVICE_AT_MAIN )
  95   1          {/*******主路到旁路判读*********/
  96   2      
  97   2              if( (sys.workMode == MODE_AUTO_SINGLE_BACK) ||  (sys.workMode == MODE_AUTO_AND_BACK) )
  98   2              { /*R2 和R3都无光旁路*/
  99   3                  if( (sys.errorCountMain >= sys.count) && (sys.errorCountStandby>= sys.count) )
 100   3                      protectFlag = 1;
 101   3              }
 102   2      
 103   2              if( (sys.workMode == MODE_AUTO_DUBLE_BACK) || (sys.workMode == MODE_AUTO_OR_BACK)  )
 104   2              { /*有1个无光旁路*/
 105   3                  if( (sys.errorCountMain >= sys.count) || (sys.errorCountStandby>= sys.count) )
 106   3                      protectFlag = 1;
 107   3              }
 108   2      
 109   2      
 110   2              if( protectFlag )
 111   2              { 
 112   3      
 113   3                      sys.workStatus = SERVICE_AT_STANDBY;
 114   3      
C51 COMPILER V7.09   PROTECTJ                                                              02/13/2012 10:59:00 PAGE 3   

 115   3                      protect_action();
 116   3      
 117   3              }     
 118   2          }
 119   1          else
 120   1          { /*******旁路到主路判读*********/
 121   2      
 122   2              if( (sys.workMode == MODE_AUTO_SINGLE_BACK) || (sys.workMode == MODE_AUTO_OR_BACK)  )
 123   2              { /*有1个无光返回*/
 124   3                  if( (sys.okCountMain >= sys.count) || (sys.okCountStandby>= sys.count) )
 125   3                      protectFlag = 1;
 126   3              }
 127   2      
 128   2              if( (sys.workMode == MODE_AUTO_DUBLE_BACK) || (sys.workMode == MODE_AUTO_AND_BACK)  )
 129   2              { /*R2 和R3都无光返回*/
 130   3                  if( (sys.okCountMain >= sys.count) && (sys.okCountStandby>= sys.count) )
 131   3                      protectFlag = 1;
 132   3              }
 133   2      
 134   2      
 135   2              if( protectFlag )
 136   2              { 
 137   3      
 138   3                      sys.workStatus = SERVICE_AT_MAIN;
 139   3      
 140   3                      protect_action();
 141   3      
 142   3              }
 143   2              }
 144   1      }
 145          
 146          
 147          
 148          
 149          
 150          
 151          
 152          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    326    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

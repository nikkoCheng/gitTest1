C51 COMPILER V7.09   KEYCOMMAND                                                            11/05/2012 16:02:21 PAGE 1   


C51 COMPILER V7.09, COMPILATION OF MODULE KEYCOMMAND
OBJECT MODULE PLACED IN .\OUT\keyCommand.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE command\keyCommand.c LARGE BROWSE INCDIR(main,header_files,dataProcess,watc
                    -hDog,ledProcess,mcu,IDB,alarm,timer,command,uart) DEBUG OBJECTEXTEND PRINT(.\OUT\keyCommand.lst) OBJECT(.\OUT\keyCommand
                    -.obj)

line level    source

   1          #include "typeDef.h"
   2          #include "share.h"
   3          #include "cmdCode.h"
   4          #include "hardInfo.h"
   5          #include "uart1.h"
   6          #include "1.h"
   7          #include "netCommand.h"
   8          #include "e2pRomAddr.h"
   9          #include "dataProcess.h"
  10          #include "variable.h"
  11          #include "netcommand.h"
  12          
  13          #define CMD_KEY_OPEN_REQUEST    0xAB    /*钥匙发出的开锁请求*/      
  14          
  15          
  16          /*钥匙开锁命令*/
  17          void key_open_door_request(void)
  18          {
  19   1          unsigned char *ptr;
  20   1      
  21   1          uart2.reqLen= 2+4+1+6+6;
  22   1      
  23   1          ptr = &uart2.reqBuffer[4];
  24   1          *ptr++ = RET_TYPE;                  /*类型*/
  25   1          *ptr++ = CMD_UP_PORT_EVENT;
  26   1      
  27   1          get_device_id(ptr);
  28   1          ptr += 4;
  29   1          
  30   1          *ptr++ = 0x55;                      /*钥匙申请开门*/
  31   1      
  32   1          get_clock_time(ptr);
  33   1          ptr +=3;
  34   1          get_clock_date(ptr);
  35   1          ptr +=3;
  36   1          
  37   1          *ptr++ = 00;                        /*钥匙ID高位*/
  38   1          *ptr++ = 00;
  39   1          *ptr++ = uart1.rxBuffer[9];
  40   1          *ptr++ = uart1.rxBuffer[10];
  41   1          *ptr++ = uart1.rxBuffer[11];
  42   1          *ptr++ = uart1.rxBuffer[12];
  43   1      
  44   1          mainInfo.curKeyId[0] = 0;   /*保留钥匙ID*/
  45   1          mainInfo.curKeyId[1] = 0;
  46   1          mainInfo.curKeyId[2] = uart1.rxBuffer[9];
  47   1          mainInfo.curKeyId[3] = uart1.rxBuffer[10];
  48   1          mainInfo.curKeyId[4] = uart1.rxBuffer[11];
  49   1          mainInfo.curKeyId[5] = uart1.rxBuffer[12];
  50   1      
  51   1      }
  52          
  53          
C51 COMPILER V7.09   KEYCOMMAND                                                            11/05/2012 16:02:21 PAGE 2   

  54          /***钥匙命令处理***/
  55          void key_command(void)
  56          {
  57   1      
  58   1              
  59   1      #if 0
                  char cTmp;
                  cTmp = device_fcs(uart2.rxBuffer, uart2.rxBuffer[3]);
                  if( cTmp) /*校验是否正确*/
                      return;
              #endif
  65   1      
  66   1      
  67   1          switch ( uart1.rxData[0] )
  68   1          { 
  69   2              case CMD_KEY_OPEN_REQUEST:      /*钥匙发出的开锁请求*/
  70   2                      
  71   2                  if( mainInfo.lockReqState == 0 )
  72   2                  {
  73   3                      if( (uart1.rxBuffer[9]==0xFF) && (uart1.rxBuffer[9]==0xFF) && (uart1.rxBuffer[9]==0xFF) &&
             - (uart1.rxBuffer[9]==0xFF) )
  74   3                          break;
  75   3      
  76   3                      mainInfo.lockReqState = LOCK_REQ_STATE_1ST;
  77   3                      key_open_door_request();
  78   3                      disable_report_flag();          /*禁止上报记录，等收到保留钥匙号后*/
  79   3      #if 0
                              mainInfo.openLockFlag = OPEN_LOCK_FLAG_SINGLE;  /*测试用。收到钥匙命令就开锁*/
                              //mainInfo.openLockFlag = OPEN_LOCK_FLAG_DOUBLE;  /*测试用。收到钥匙命令就开锁*/
                              //mainInfo.openLockFlag = OPEN_LOCK_FLAG_FOURFOLD;  /*测试用。收到钥匙命令就开锁*/
              #endif 
  84   3                  }
  85   2                  break;
  86   2      
  87   2              default:
  88   2                  break;
  89   2          }
  90   1      
  91   1      
  92   1      }
  93          
  94          
  95          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    389    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----       3
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

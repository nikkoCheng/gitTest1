C51 COMPILER V7.09   DATAPROCESS                                                           11/05/2012 16:02:03 PAGE 1   


C51 COMPILER V7.09, COMPILATION OF MODULE DATAPROCESS
OBJECT MODULE PLACED IN .\OUT\dataProcess.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE dataProcess\dataProcess.c LARGE BROWSE INCDIR(main,header_files,dataProcess
                    -,watchDog,ledProcess,mcu,IDB,alarm,timer,command,uart) DEBUG OBJECTEXTEND PRINT(.\OUT\dataProcess.lst) OBJECT(.\OUT\data
                    -Process.obj)

line level    source

   1          #include "typeDef.h"
   2          #include "e2promAddr.h"
   3          #include "share.h"
   4          
   5          //#include "hardware.h"
   6          #include "at24c16.h"
   7          //#include "cmdAddr.h"
   8          #include "dataprocess.h"
   9          //#include "share.h"
  10          
  11          WR_NVRAM_BUFF nvramBuffer[NVRAM_BUFFER_NUMBER];
  12          
  13          static char write_nvram(char *buffer, unsigned int address, char length);
  14          static char read_nvram(char *buffer, unsigned int address, char length);
  15          
  16          unsigned int addr;
  17          unsigned char dataLen;
  18          
  19          char nvram_conver(char cmdCode)
  20          {
  21   1          unsigned char i;
  22   1      
  23   1          switch( cmdCode )
  24   1          {
  25   2              case DEVICE_ALIAS_H: 
  26   2                 dataLen = DEVICE_ALIAS_H_LEN;
  27   2                  addr = DEVICE_ALIAS_H_ADDR;
  28   2                  break;
  29   2      
  30   2              case DEVICE_ALIAS_L: 
  31   2                 dataLen = DEVICE_ALIAS_L_LEN;
  32   2                  addr = DEVICE_ALIAS_L_ADDR;
  33   2                  break;
  34   2                  
  35   2              case KEEP_KEY_ID0: 
  36   2              case KEEP_KEY_ID1: 
  37   2              case KEEP_KEY_ID2: 
  38   2              case KEEP_KEY_ID3: 
  39   2              case KEEP_KEY_ID4: 
  40   2              case KEEP_KEY_ID5: 
  41   2              case KEEP_KEY_ID6: 
  42   2              case KEEP_KEY_ID7: 
  43   2              case KEEP_KEY_ID8: 
  44   2              case KEEP_KEY_ID9: 
  45   2              case KEEP_KEY_ID10: 
  46   2              case KEEP_KEY_ID11: 
  47   2              case KEEP_KEY_ID12: 
  48   2              case KEEP_KEY_ID13: 
  49   2              case KEEP_KEY_ID14: 
  50   2              case KEEP_KEY_ID15: 
  51   2              case KEEP_KEY_ID16: 
  52   2              case KEEP_KEY_ID17: 
  53   2              case KEEP_KEY_ID18: 
C51 COMPILER V7.09   DATAPROCESS                                                           11/05/2012 16:02:03 PAGE 2   

  54   2              case KEEP_KEY_ID19: 
  55   2              case KEEP_KEY_ID20: 
  56   2              case KEEP_KEY_ID21: 
  57   2              case KEEP_KEY_ID22: 
  58   2              case KEEP_KEY_ID23: 
  59   2                  i = cmdCode - KEEP_KEY_ID0;
  60   2                  dataLen = KEEP_KEY_ID0_LEN;
  61   2                  addr = KEEP_KEY_ID0_ADDR + dataLen * i;
  62   2                  break;
  63   2      
  64   2              default:
  65   2                 return ERROR;
  66   2          }
  67   1      
  68   1          return OK;
  69   1      }
  70          
  71          
  72          char readData( char cmdCode,char *ptr )
  73          {
  74   1          char *buff;
  75   1      
  76   1          if( nvram_conver(cmdCode) == ERROR )
  77   1              return ERROR;
  78   1      
  79   1      
  80   1          buff = ptr;
  81   1      
  82   1          if( read_nvram( buff,addr,dataLen ) == OK )   
  83   1              return OK;
  84   1          else
  85   1              return ERROR;
  86   1      } 
  87          
  88          
  89          
  90          char writeData( char cmdCode,char *ptr )
  91          {
  92   1          char *buff;
  93   1      
  94   1          if( nvram_conver(cmdCode) == ERROR )
  95   1              return ERROR;
  96   1      
  97   1      
  98   1          buff = ptr;
  99   1      
 100   1          if( write_nvram( buff,addr,dataLen ) == OK )  
 101   1              return OK;
 102   1          else
 103   1              return ERROR;
 104   1      }
 105          
 106          
 107          
 108          static char write_nvram(char *buffer, unsigned int address, unsigned char length)
 109          {
 110   1          unsigned char i;
 111   1          char *ptr;
 112   1      
 113   1          for(i=0; i<NVRAM_BUFFER_NUMBER; i++)
 114   1          {
 115   2              if( nvramBuffer[i].length == 0 )
C51 COMPILER V7.09   DATAPROCESS                                                           11/05/2012 16:02:03 PAGE 3   

 116   2                  break;
 117   2          }
 118   1      
 119   1          nvramBuffer[i].length = length;
 120   1          nvramBuffer[i].address = address;
 121   1      
 122   1          ptr = nvramBuffer[i].buffer;
 123   1          for(i=0; i<length; i++)
 124   1          {
 125   2              *ptr ++ = *buffer ++;
 126   2          }
 127   1          
 128   1          return OK;
 129   1      
 130   1      }
 131          
 132          static char read_nvram(char *buffer, unsigned int address, unsigned char length)
 133          {
 134   1      
 135   1          page_read_24c08(address, buffer, length);
 136   1      
 137   1          return OK;
 138   1      }
 139          
 140          void nvram_process_init(void)
 141          {
 142   1          unsigned char i;
 143   1              
 144   1          E2prom_Init();
 145   1      
 146   1          for(i=0; i<NVRAM_BUFFER_NUMBER; i++)
 147   1          {
 148   2              nvramBuffer[i].length = 0;
 149   2          }
 150   1      
 151   1      #if 0
                  {
                      char cc[8];
              
                      page_read_24c08(0, cc, 8);
              
                      cc[0] = 0x11;
                      cc[1] = 0x22;
                      cc[2] = 0x33;
                      cc[3] = 0x44;
                      cc[4] = 0x56;
                      cc[5] = 0x78;
                      cc[5] = 0x90;
                      cc[6] = 0xAB;
                      cc[7] = 0xCE;
                      page_write_24c08(0, cc, 8);
              
                      cc[0] = 0;
                      cc[1] = 0;
                      cc[2] = 0;
                      cc[3] = 0;
                      cc[4] = 0;
                      cc[5] = 0;
                      cc[5] = 0;
                      cc[6] = 0;
                      cc[7] = 0;
                      page_read_24c08(0, cc, 8);
C51 COMPILER V7.09   DATAPROCESS                                                           11/05/2012 16:02:03 PAGE 4   

              
                  }
              #endif
 181   1      
 182   1      
 183   1      
 184   1      }
 185          
 186          
 187          void nvram_process(void)
 188          {
 189   1          unsigned char i;
 190   1      
 191   1          for(i=0; i<NVRAM_BUFFER_NUMBER; i++)
 192   1          {
 193   2              if( nvramBuffer[i].length != 0 )
 194   2              {
 195   3                  page_write_24c08(nvramBuffer[i].address, nvramBuffer[i].buffer, nvramBuffer[i].length);
 196   3                  nvramBuffer[i].length = 0;
 197   3                  break;
 198   3              }
 199   2          }
 200   1      
 201   1      }
 202          
 203          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    488    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    333      16
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

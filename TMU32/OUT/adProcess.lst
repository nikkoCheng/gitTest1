C51 COMPILER V7.09   ADPROCESS                                                             02/13/2012 10:58:50 PAGE 1   


C51 COMPILER V7.09, COMPILATION OF MODULE ADPROCESS
OBJECT MODULE PLACED IN .\OUT\adProcess.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE adConvert\adProcess.c LARGE BROWSE INCDIR(main,header_files,dataProcess,wat
                    -chDog,ledProcess,mcu,adConvert,IDB,protect_j,alarm,key,timer,command) DEBUG OBJECTEXTEND PRINT(.\OUT\adProcess.lst) OBJE
                    -CT(.\OUT\adProcess.obj)

line level    source

   1          /*************************************************
   2          *adProcess.c
   3          *
   4          *************************************************/
   5          
   6          #include "typeDef.h"
   7          #include "adcDriver.h"
   8          #include "adProcess.h"
   9          #include "share.h"
  10          #include "protect.h"
  11          
  12          extern U16 iADData[8];
  13          extern void Adc0_SFR_CNF(void);
  14          extern U16 Ad_Read(U8 cChannel);
  15          
  16          U16 data iAdData[8];
  17          #define  AD_CHANNEL_RI          0
  18          #define  AD_CHANNEL_RW          1
  19          #define  AD_CHANNEL_RP          2
  20          
  21          #define  AD_CHANNEL_R_EAST      3
  22          #define  AD_CHANNEL_R_WEST      4
  23          
  24          
  25          #define POWER_TEMP_NUM          10
  26          #define POWER_TEMP_VARIABLE     sys.powerTmp
  27          
  28          
  29          unsigned char data adCount;
  30          int idata mainTmp[POWER_TEMP_NUM];        
  31          int idata standbyTmp[POWER_TEMP_NUM];     
  32          
  33          
  34          /************************************
  35          *AD转换值平均的10倍。
  36          *此函数是给主程序定时计算光功率用的，中断时自己计算不用此函数。
  37          **************************************/
  38          int average_power(char channel)
  39          {
  40   1          char i;
  41   1          int *ptr;
  42   1          int sum;
  43   1      
  44   1          sum = 0;
  45   1      
  46   1          if( channel == AD_CHANNEL_RW )
  47   1          {
  48   2              ptr = mainTmp;
  49   2          }
  50   1          else if( channel == AD_CHANNEL_RP )
  51   1          {
  52   2              ptr = standbyTmp;
  53   2          }
C51 COMPILER V7.09   ADPROCESS                                                             02/13/2012 10:58:50 PAGE 2   

  54   1          else if( channel == AD_CHANNEL_R_EAST )
  55   1          {
  56   2              EA = 0;
  57   2              sum = sys.powerSingleEast;
  58   2              EA = 1;
  59   2              
  60   2              return sum;
  61   2          }
  62   1          else
  63   1          {
  64   2              EA = 0;
  65   2              sum = sys.powerSingleWest;
  66   2              EA = 1;
  67   2              
  68   2              return sum;
  69   2          }
  70   1      
  71   1          
  72   1          for(i=0; i<POWER_TEMP_NUM; i++)   
  73   1          {
  74   2              EA = 0;
  75   2              sum += *ptr ++;
  76   2              EA = 1;
  77   2          }
  78   1      
  79   1          sum = sum / POWER_TEMP_NUM;                              
  80   1      
  81   1          return sum;
  82   1      }
  83          
  84          
  85          void power_process_null(int value)
  86          {
  87   1          value ++;
  88   1      }
  89          
  90          
  91          
  92          void ad_variable_init(void)
  93          {
  94   1              
  95   1              adCount = 0;
  96   1      
  97   1              clear_ram((char *)mainTmp, sizeof(mainTmp));
  98   1              clear_ram((char *)standbyTmp, sizeof(standbyTmp));
  99   1      
 100   1              sys.ad_RW_slope = mainInfo.ad_RW_slope;
 101   1              sys.ad_RW_intercept = mainInfo.ad_RW_intercept;
 102   1      
 103   1              sys.ad_RP_slope = mainInfo.ad_RP_slope;
 104   1              sys.ad_RP_intercept = mainInfo.ad_RP_intercept;
 105   1      
 106   1              sys.ad_RI_slope = mainInfo.ad_RI_slope;
 107   1              sys.ad_RI_intercept = mainInfo.ad_RI_intercept;
 108   1      
 109   1      }
 110          
 111          
 112          void ad_process_init(void)
 113          {
 114   1              ADC0_Init();
 115   1              ad_variable_init();
C51 COMPILER V7.09   ADPROCESS                                                             02/13/2012 10:58:50 PAGE 3   

 116   1      }
 117          
 118          
 119          void ADC0_Init(void)
 120          {
 121   1              Adc0_SFR_CNF(); 
 122   1              
 123   1      }
 124          
 125          
 126          
 127          
 128          
 129          void adProcess(void)
 130          {
 131   1              S16 data iDataTmp;
 132   1      
 133   1      
 134   1              adCount ++;
 135   1              if( adCount >= POWER_TEMP_NUM )
 136   1              {
 137   2              adCount = 0;
 138   2              }
 139   1      
 140   1              /*处理主*/
 141   1              iDataTmp = Ad_Read(AD_CHANNEL_RW);
 142   1              mainTmp[adCount] = iDataTmp;
 143   1              sys.powerTmp = (iDataTmp * 10 -  sys.ad_RW_intercept) / sys.ad_RW_slope;
 144   1              sys.powerSingleMain = sys.powerTmp;
 145   1      
 146   1              /*处理备*/
 147   1              iDataTmp = Ad_Read(AD_CHANNEL_RP);
 148   1              standbyTmp[adCount] = iDataTmp;
 149   1              sys.powerTmp = (iDataTmp * 10 -  sys.ad_RP_intercept) / sys.ad_RP_slope;
 150   1              sys.powerSingleStandby= sys.powerTmp;
 151   1      
 152   1              //bLedRun = 1;  //test
 153   1      
 154   1              protect_obp();
 155   1      }
 156          
 157          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    377    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----       5
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     17       2
   IDATA SIZE       =     40    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
